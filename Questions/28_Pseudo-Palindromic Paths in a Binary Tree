//https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/?envType=daily-question&envId=2024-01-24


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    int pseudoPalindromicPaths(TreeNode* root) {
        int count = 0, path = 0;

        stack<pair<TreeNode*, int>> stk;
        stk.push({root, 0});

        while (!stk.empty()) {
            auto [node, path] = stk.top();  // Destructure the pair into 'node' and 'path'.
            stk.pop();

            if (node != nullptr) {
                // Update the path by toggling the bit corresponding to the current node's value.
                path = path ^ (1 << node->val);

                if (node->left == nullptr && node->right == nullptr) {
                    // Check if the current path is a pseudo-palindromic path.
                    if ((path & (path - 1)) == 0) {
                        ++count;  // Increment the count if the path is pseudo-palindromic.
                    }
                } else {
                    // Push the right and left children along with the updated path onto the stack.
                    stk.push({node->right, path});
                    stk.push({node->left, path});
                }
            }
        }

        return count;  // Return the total count of pseudo-palindromic paths.
    }
};
